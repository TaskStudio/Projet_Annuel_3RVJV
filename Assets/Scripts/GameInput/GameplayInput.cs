//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/GameplayInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameplayInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameplayInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameplayInput"",
    ""maps"": [
        {
            ""name"": ""Actionable"",
            ""id"": ""494bf611-261d-40f4-9929-44185784d612"",
            ""actions"": [
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""6a2397e4-6783-4d03-96a8-2f964171eccb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action2"",
                    ""type"": ""Button"",
                    ""id"": ""ca1ebc1f-1c92-42e7-96d7-bbfc70d7a934"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action3"",
                    ""type"": ""Button"",
                    ""id"": ""2bf32082-a36a-4c50-a794-12511cb5485b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action4"",
                    ""type"": ""Button"",
                    ""id"": ""b23e899c-a4c3-409d-ba1d-3baeae98dfa4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aeeaa9d9-8970-4b50-9307-bc13ae465924"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""55546c26-2f18-4f82-b8e0-ce717e6f4eca"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08006ba0-32ce-4da5-8080-cbef54669a44"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f936efc-602d-4f18-ae18-097c334bac94"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actionable
        m_Actionable = asset.FindActionMap("Actionable", throwIfNotFound: true);
        m_Actionable_Action1 = m_Actionable.FindAction("Action1", throwIfNotFound: true);
        m_Actionable_Action2 = m_Actionable.FindAction("Action2", throwIfNotFound: true);
        m_Actionable_Action3 = m_Actionable.FindAction("Action3", throwIfNotFound: true);
        m_Actionable_Action4 = m_Actionable.FindAction("Action4", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actionable
    private readonly InputActionMap m_Actionable;
    private List<IActionableActions> m_ActionableActionsCallbackInterfaces = new List<IActionableActions>();
    private readonly InputAction m_Actionable_Action1;
    private readonly InputAction m_Actionable_Action2;
    private readonly InputAction m_Actionable_Action3;
    private readonly InputAction m_Actionable_Action4;
    public struct ActionableActions
    {
        private @GameplayInput m_Wrapper;
        public ActionableActions(@GameplayInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action1 => m_Wrapper.m_Actionable_Action1;
        public InputAction @Action2 => m_Wrapper.m_Actionable_Action2;
        public InputAction @Action3 => m_Wrapper.m_Actionable_Action3;
        public InputAction @Action4 => m_Wrapper.m_Actionable_Action4;
        public InputActionMap Get() { return m_Wrapper.m_Actionable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionableActions set) { return set.Get(); }
        public void AddCallbacks(IActionableActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionableActionsCallbackInterfaces.Add(instance);
            @Action1.started += instance.OnAction1;
            @Action1.performed += instance.OnAction1;
            @Action1.canceled += instance.OnAction1;
            @Action2.started += instance.OnAction2;
            @Action2.performed += instance.OnAction2;
            @Action2.canceled += instance.OnAction2;
            @Action3.started += instance.OnAction3;
            @Action3.performed += instance.OnAction3;
            @Action3.canceled += instance.OnAction3;
            @Action4.started += instance.OnAction4;
            @Action4.performed += instance.OnAction4;
            @Action4.canceled += instance.OnAction4;
        }

        private void UnregisterCallbacks(IActionableActions instance)
        {
            @Action1.started -= instance.OnAction1;
            @Action1.performed -= instance.OnAction1;
            @Action1.canceled -= instance.OnAction1;
            @Action2.started -= instance.OnAction2;
            @Action2.performed -= instance.OnAction2;
            @Action2.canceled -= instance.OnAction2;
            @Action3.started -= instance.OnAction3;
            @Action3.performed -= instance.OnAction3;
            @Action3.canceled -= instance.OnAction3;
            @Action4.started -= instance.OnAction4;
            @Action4.performed -= instance.OnAction4;
            @Action4.canceled -= instance.OnAction4;
        }

        public void RemoveCallbacks(IActionableActions instance)
        {
            if (m_Wrapper.m_ActionableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionableActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionableActions @Actionable => new ActionableActions(this);
    public interface IActionableActions
    {
        void OnAction1(InputAction.CallbackContext context);
        void OnAction2(InputAction.CallbackContext context);
        void OnAction3(InputAction.CallbackContext context);
        void OnAction4(InputAction.CallbackContext context);
    }
}
