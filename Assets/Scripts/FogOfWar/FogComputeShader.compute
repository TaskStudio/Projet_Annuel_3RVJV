#pragma kernel CSMain

RWTexture2D<float4> Result;
float4 clearColor;
float4 fullBlackColor;
int gridSize;
float cellSize;
float revealRadiusResourceStorages;
float revealRadiusVisionTowers;
float revealRadiusFactories;

float groundPlaneScaleX;
float groundPlaneScaleZ;

StructuredBuffer<float4> unitPositions;
StructuredBuffer<float4> resourceStoragePositions;
StructuredBuffer<float4> visionTowerPositions;
StructuredBuffer<float4> factoryPositions;
StructuredBuffer<float4> enemyPositions;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    int2 coord = int2(id.xy);
    if (coord.x >= 0 && coord.x < gridSize && coord.y >= 0 && coord.y < gridSize)
    {
        float4 color = fullBlackColor;

        // Check unit positions (allies)
        for (int i = 0; i < unitPositions.Length; i++)
        {
            int2 center = int2((unitPositions[i].xy + float2(groundPlaneScaleX * 5.0f, groundPlaneScaleZ * 5.0f)) / cellSize);
            float2 pos = (float2(coord) - float2(center)) * cellSize;
            float distance = length(pos);
            if (distance <= unitPositions[i].w) // using w component for detection range
            {
                color = clearColor;
                break;
            }
        }

        // Check resource storage positions if not cleared by units
        if (all(color == fullBlackColor))
        {
            for (int i = 0; i < resourceStoragePositions.Length; i++)
            {
                int2 center = int2((resourceStoragePositions[i].xy + float2(groundPlaneScaleX * 5.0f, groundPlaneScaleZ * 5.0f)) / cellSize);
                float2 pos = (float2(coord) - float2(center)) * cellSize;
                float distance = length(pos);
                if (distance <= revealRadiusResourceStorages)
                {
                    color = clearColor;
                    break;
                }
            }
        }

        // Check VisionTower positions if not cleared by units or resource storages
        if (all(color == fullBlackColor))
        {
            for (int i = 0; i < visionTowerPositions.Length; i++)
            {
                int2 center = int2((visionTowerPositions[i].xy + float2(groundPlaneScaleX * 5.0f, groundPlaneScaleZ * 5.0f)) / cellSize);
                float2 pos = (float2(coord) - float2(center)) * cellSize;
                float distance = length(pos);
                if (distance <= revealRadiusVisionTowers)
                {
                    color = clearColor;
                    break;
                }
            }
        }

        // Check Factory positions if not cleared by units, resource storages, or VisionTowers
        if (all(color == fullBlackColor))
        {
            for (int i = 0; i < factoryPositions.Length; i++)
            {
                int2 center = int2((factoryPositions[i].xy + float2(groundPlaneScaleX * 5.0f, groundPlaneScaleZ * 5.0f)) / cellSize);
                float2 pos = (float2(coord) - float2(center)) * cellSize;
                float distance = length(pos);
                if (distance <= revealRadiusFactories)
                {
                    color = clearColor;
                    break;
                }
            }
        }

        Result[coord] = color;
    }
}
